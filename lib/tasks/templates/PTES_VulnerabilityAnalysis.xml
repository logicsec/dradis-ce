
<?xml version="1.0"?>
<methodology>
	<name>PTES Vulnerability Analysis</name>
	<sections>
		<section>
			<name>Vulnerability Testing</name>
			<tasks>
				<task>Automated Tools: use a Network/General Vulnerability Scanner to scan for vulnerability. Popular options include Open Vulnerability Assessment System (OpenVAS) (Linux), Nessus (Windows/Linux), Nexpose, eEye Retina, Qualys, Core IMPACT, and SAINT.</task>
				<task>Web Application Scanners: Use a General Web Application Scanner to identify vulnerabilities within the Web application. Common tools include WebInspect (Windows), IBM AppScan, NetSparker (Windows), </task>
				<task>Web Directory Listing/Bruteforcing: DirBuster is a java application that is designed to brute force web directories and files names. DirBuster attempts to find hidden or obfuscated directories, but as with any bruteforcing tool, it is only as good as the directory and file list utilized.</task>
				<task>Virtual Private Networking (VPN): VPN servers generally will not be detected by a port scans as they don't listen on TCP ports, so a TCP port scan won't find them. In addition, they won't normally send ICMP unreachable messages, so a UDP port scans more than likely won't find them. Common specialized scanners include ike-scan.</task>
				<task>IPv6: test for known ipv6 vulnerabilities. Common tools include the THC-IPV6 Attack Toolkit, or Exploit6.</task>
				<task>War Dialing: use a moden to automatically scan a list of telephone numbers and every number in a local area code to search for computers, Bulletin board systems and fax machines. Common tools for this task include WarVOX, iWar, Plain Analog Wardialer (PAW) / Python Advanced Wardialing System (PAWS).</task>
				<task>SIP: Scan for live SIP extensions and SIP enabled applications. Common tools used for this task include SIPSCAN, SIPSAK, and SVMAP.</task>
				<task>Traffic Monitoring: use this essentially "free" way to ensure that the data you are reporting is as accurate as possible. Common tools for this task include P0f, Wireshark, Tcpdump, and Metasploit Scanners.</task>
			</tasks>
		</section>
		<section>
			<name>Vulnerability Validation</name>
			<tasks>
				<task>Public Research: A product of the vast amount of security research is the discovery of vulnerabilities and associated Proof of Concept (PoC) and/or exploit code. The results from the vulnerability identification phase must be individually validated and where exploits are available, these must be validated. The only exception would be an exploit that results in a Denial of Service (DoS). This would need to be included in the scope to be considered for validation. There are numerous sites that offer such code for download that should be used as part of the Vulnerability Analysis phase: Exploit-db - http://www.exploit-db.com, Security Focus - http://www.securityfocus.com, Packetstorm - http://www.packetstorm.com, Security Reason - http://www.securityreason.com, Black Asylum - http://www.blackasylum.com/?p=160</task>
				<task>Common/default passwords: Attempt to identify if a device, application, or operating system is vulnerable to a default credential attack is really as simple as trying to enter in known default passwords. Default passwords can be obtained from the following websites: http://www.phenoelit-us.org/dpl/dpl.html, http://cirt.net/passwords, http://www.defaultpassword.com, http://www.passwordsdatabase.com, http://www.isdpodcast.com/resources/62k-common-passwords/</task>
				<task>Establish target list: Identify all potential targets. A properly defined target list should include a mapping of OS version, patch level information. If known it should include web application weaknesses, lockout thresholds and weak ports for attack.</task>
				<task>Mapping Versions: Version checking is a quick way to identify application information. To some extent, versions of services can be fingerprinted using nmap, and versions of web applications can often be gathered by looking at the source of an arbitrary page.</task>
				<task>Identifying Patch Levels: To identify the patch level of services internally, consider using software which will interrogate the system for differences between versions. Credentials may be used for this phase of the penetration test, provided the client has acquiesced. Vulnerability scanners are particularly effective at identifying patch levels remotely, without credentials.</task>
				<task>Looking for Weak Web Applications: Things to look for include OTS applications that have been misconfigured, OTS application which have plugin functionality (plugins often contain more vulnerable code than the base application), and custom applications. Web application fingerprinters such as WAFP can be used here to great effect.</task>
				<task>Identify Weak Ports and Services: Identifying weak ports can be done using banner grabbing, nmap and common sense. Many ports and services will lie, or mislead about the specifics of their version.</task>
				<task>Identify Lockout threshold: Identifying the lockout threshold of an authentication service will allow you to ensure that your bruteforce attacks do not intentionally lock out valid users during your testing. Identify all disparate authentication services in the environment, and test a single, innocuous account for lockout. Often 5 - 10 tries of a valid account is enough to determine if the service will lock users out.</task>
			</tasks>
		</section>
		<section>
			<name>Attack Avenues</name>
			<tasks>
				<task>Creation of Attack Trees: Create conceptual diagrams of threats on target systems that include all possible attack methods to reach those threats.</task>
				<task>Identify Network protections mechanisms- "Simple" Packet Filters: Packet filters are rules for classifying packets based on their header fields. Packet classification is essential to routers supporting services such as quality of service (QoS), virtual private networks (VPNs), and firewalls.</task>
				<task>Identify Network protections mechanisms - Traffic shaping devices: Traffic shaping is the control of computer network traffic in order to optimize or guarantee performance, improve latency, and/or increase usable bandwidth for some kinds of packets by delaying other kinds of packets that meet certain criteria. During penetration test traffic shaping can also control the volume of traffic being sent into a network in a specified period, or the maximum rate at which the traffic is sent. For these reasons; traffic shaping is important to detect at the network edges to avoid packet dropping and packet marking.</task>
				<task>Identify Network protections mechanisms - Data Loss Prevention (DLP) systems: Data Loss Prevention (DLP) refers to systems that identify, monitor, and protect data in use, data in motion, and data at rest via content inspection and contextual analysis of activities (attributes of originator, data object, medium, timing, recipient/destination and so on). DLP systems are analogous to intrusion-prevention system for data.</task>
				<task>Identify Host based protection mechanisms - Stack/heap protections: Numerous tools are available that can monitor the host to provide protections against buffer overflows. Microsoft's Data Execution Prevention mode is an example that is designed to explicitly protect the pointer to the SEH Exception Handler from being overwritten.</task>
				<task>Identify Host based protection mechanisms - Whitelisting: Whitelisting provides a list of entities that are being provided a particular privilege, service, mobility, access, or recognition. An emerging approach in combating attacks by viruses and malware is to whitelist software which is considered safe to run, blocking all others</task>
				<task>Identify Host based protection mechanisms - AV/Filtering/Behavioral Analysis: Behavioral analysis works from a set of rules that define a program as either legitimate, or malicious. Behavioral analysis technology monitors what an application or piece of code does and attempts to restrict its action. Examples of this might include applications trying to write to certain parts of a system registry, or writing to pre-defined folders. These and other actions would be blocked, with the actions notified to the user or administrator.</task>
				<task>Identify any application level protection mechanisms in place.</task>
			</tasks>
		</section>
	</sections>
</methodology>